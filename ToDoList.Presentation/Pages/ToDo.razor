@page "/"
@rendermode InteractiveServer
@inject IToDoList ToDoListService
@inject INotificationService NotificationService

<PageTitle>Todo</PageTitle>

<div class="mx-auto max-w-screen-xl px-4 2xl:px-0">
    <div class="mx-auto max-w-5xl">
        <div class="gap-4 sm:flex sm:items-center sm:justify-between">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white sm:text-2xl">To-do list</h2>

            <div class="mt-6 gap-4 space-y-4 sm:mt-0 sm:flex sm:items-center sm:justify-end sm:space-y-0">
                <div>
                    <Select TValue="ToDoType" SelectedValueChanged="@OnSelectedToDoTypeChanged" class="min-w-[8rem] block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-primary-500 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder:text-gray-400 dark:focus:border-primary-500 dark:focus:ring-primary-500">
                        <SelectItem Value="@ToDoType.All">All</SelectItem>
                        <SelectItem Value="@ToDoType.Uncomplete">Uncomplete</SelectItem>
                        <SelectItem Value="@ToDoType.Completed">Completed</SelectItem>
                    </Select>
                </div>

                <span class="inline-block text-gray-500 dark:text-gray-400"> from </span>

                <div>
                    <div class="relative max-w-sm">
                        <div class="pointer-events-none absolute inset-y-0 start-0 flex items-center ps-3">
                            <svg class="h-4 w-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z" />
                            </svg>
                        </div>
                        <DatePicker @ref="FilterStartDatePicker" TValue="DateTime?" DateChanged="OnStartDateChanged" Max="FilterStartDateMax" InputMode="DateInputMode.Date" class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 ps-10 text-sm text-gray-900 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Select date" />
                    </div>
                </div>

                <span class="inline-block text-gray-500 dark:text-gray-400"> to </span>

                <div>
                    <div class="relative max-w-sm">
                        <div class="pointer-events-none absolute inset-y-0 start-0 flex items-center ps-3">
                            <svg class="h-4 w-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z" />
                            </svg>
                        </div>
                        <DatePicker @ref="FilterEndDatePicker" TValue="DateTime?" Min="FilterEndDateMin" DateChanged="OnEndDateChanged" InputMode="DateInputMode.Date" class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 ps-10 text-sm text-gray-900 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Select date" />
                    </div>
                </div>
            </div>
        </div>

        <button type="button" class="shadow-purple-500/50 me-2 mt-6 w-full rounded-lg bg-gradient-to-r from-purple-500 via-purple-600 to-purple-700 px-5 py-2.5 text-center text-sm font-medium text-white shadow-lg hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-purple-300 dark:shadow-lg dark:shadow-purple-800/80 dark:focus:ring-purple-800">Add New To-do</button>

        @if (isBusy)
        {
            <h2 class="text-l mt-6 font-semibold text-gray-900 dark:text-white sm:text-xl">Loading</h2>
        }
        

        <div class="mt-6 flow-root sm:mt-8">
            <div class="divide-y divide-gray-200 dark:divide-gray-700">
            @foreach(var item in ToDoRecords)
            {
                <ToDoItem Record="@item" OnUpdate="UpdateRecord" OnDelete="DeleteRecord"></ToDoItem>
            }
            </div>
        </div>
    </div>
</div>

@code{
    DatePicker<DateTime?> FilterStartDatePicker;

    DatePicker<DateTime?> FilterEndDatePicker;

    DateTime? FilterStartDate { get; set; }

    DateTime? FilterStartDateMax { get; set; }

    DateTime? FilterEndDate { get; set; }

    DateTime? FilterEndDateMin { get; set; }

    public ToDoType SelectedToDoType { get; set; }

    public List<ToDoRecord> ToDoRecords { get; set; } = new List<ToDoRecord>();

    private bool isBusy { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshList();
    }

    private async Task RefreshList()
    {
        isBusy = true;

        var result = await ToDoListService.GetAllRecordsAsync();
        if (!result.IsSuccess)
        {
            // display error message
            return;
        }

        ToDoRecords = result.Records;

        isBusy = false;
    }

    public async Task UpdateRecord(ToDoRecord record)
    {
        var result = await ToDoListService.UpdateRecord(record);

        if (!result.IsSuccess)
        {
            // display error message
            return;
        }

        await RefreshList();

        StateHasChanged();

        return;
    }

    public async Task DeleteRecord(int recordId)
    {
        var result = await ToDoListService.DeleteRecord(recordId);
        if (result.IsSuccess)
        {
            await RefreshList();
        }
    }

    private void OnSelectedToDoTypeChanged(ToDoType toDoType)
    {
        SelectedToDoType = toDoType;
    }

    private void OnStartDateChanged(DateTime? startDate)
    {
        FilterStartDate = startDate;
        FilterEndDateMin = startDate;
    }

    private void OnEndDateChanged(DateTime? endDate)
    {
        FilterEndDate = endDate;
        FilterStartDateMax = endDate;
    }
}