@rendermode InteractiveServer
@inject DialogService DialogService

<div class="flex flex-wrap items-center gap-y-4 py-6">
    <dl class="w-1/2 sm:w-1/4 lg:w-auto lg:flex-1">
        <dt class="text-base font-medium text-gray-500 dark:text-gray-400">Title:</dt>
        <dd class="mt-1.5 text-base font-semibold text-gray-900 dark:text-white">
            <div class="@(Record.State == ToDoState.Finished ? "text-gray-500 line-through" : "")">@Record.Title</div>
        </dd>
    </dl>

    <dl class="w-1/2 sm:w-1/4 lg:w-auto lg:flex-1">
        <dt class="text-base font-medium text-gray-500 dark:text-gray-400">Due By:</dt>
        <dd class="mt-1.5 text-base font-semibold text-gray-900 dark:text-white">
            @if(Record.DueDate == null)
            {
                <div class="@(Record.State == ToDoState.Finished ? "text-gray-500 line-through" : "")">
                    No due date
                </div>
            }
            else
            {
                <div class="@(Record.State == ToDoState.Finished ? "text-gray-500 line-through" : "")">
                    @(Record.DueDate.Value.ToString("dd.MM.yyyy"))
                </div>
            }
            
        </dd>
    </dl>

    @if (Record.State == ToDoState.Finished)
    {
        <dl class="w-1/2 sm:w-1/4 lg:w-auto lg:flex-1">
            <dt class="text-base font-medium text-gray-500 dark:text-gray-400">Finished At:</dt>
            <dd class="mt-1.5 text-base font-semibold text-gray-900 dark:text-white">@(Record.FinishedAt!.Value.ToString("dd.MM.yyyy"))</dd>
        </dl>
    }
    else
    {
        <dl class="w-1/2 sm:w-1/4 lg:w-auto lg:flex-1">
            <dt class="text-base font-medium text-gray-500 dark:text-gray-400">Created On:</dt>
            <dd class="mt-1.5 text-base font-semibold text-gray-900 dark:text-white">@(Record.CreatedOn.ToString("dd.MM.yyyy"))</dd>
        </dl>
    }

    <dl class="w-1/2 sm:w-1/4 lg:w-auto lg:flex-1">
        <dt class="text-base font-medium text-gray-500 dark:text-gray-400">Status:</dt>
        @switch (Record.State)
        {
            case ToDoState.Finished:
                <dd class="me-2 mt-1.5 inline-flex items-center rounded bg-green-100 px-2.5 py-0.5 text-xs font-medium text-green-800 dark:bg-green-900 dark:text-green-300">
                    <svg class="me-1 h-3 w-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 11.917 9.724 16.5 19 7.5" />
                    </svg>
                    Completed
                </dd>
                break;

            case ToDoState.Created:
                <dd class="bg-primary-100 text-primary-800 me-2 mt-1.5 inline-flex items-center rounded px-2.5 py-0.5 text-xs font-medium dark:bg-primary-900 dark:text-primary-300">
                    <svg class="me-1 h-3 w-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.5 4h-13m13 16h-13M8 20v-3.333a2 2 0 0 1 .4-1.2L10 12.6a1 1 0 0 0 0-1.2L8.4 8.533a2 2 0 0 1-.4-1.2V4h8v3.333a2 2 0 0 1-.4 1.2L13.957 11.4a1 1 0 0 0 0 1.2l1.643 2.867a2 2 0 0 1 .4 1.2V20H8Z" />
                    </svg>
                    Created
                </dd>
                break;

            case ToDoState.Overdue:
                <dd class="me-2 mt-1.5 inline-flex items-center rounded bg-red-100 px-2.5 py-0.5 text-xs font-medium text-red-800 dark:bg-red-900 dark:text-red-300">
                    <svg class="me-1 h-3 w-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18 17.94 6M18 18 6.06 6" />
                    </svg>
                    Cancelled
                </dd>
                break;
        }
    </dl>

    <div class="grid w-full gap-4 sm:grid-cols-2 lg:flex lg:w-64 lg:items-center lg:justify-end">

        <button @onclick="OnShowDetailsClicked" class="inline-flex w-full justify-center rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-900 hover:bg-gray-100 hover:text-primary-700 focus:z-10 focus:outline-none focus:ring-4 focus:ring-gray-100 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-400 lg:w-auto dark:hover:bg-gray-700 dark:hover:text-white dark:focus:ring-gray-700">View details</button>
        
        @if(Record.State == ToDoState.Finished)
        {
            <button @onclick="OnUncompleteBtnClicked" class="rounded-lg bg-yellow-400 px-3 py-2 text-sm font-medium text-white hover:bg-yellow-500 focus:outline-none focus:ring-4 focus:ring-yellow-300 lg:w-32 dark:focus:ring-yellow-900">Uncomplete</button>
        }
        else
        {
            <button @onclick="OnCompleteBtnClicked" class="bg-primary-700 rounded-lg px-3 py-2 text-sm font-medium text-white hover:bg-primary-800 focus:outline-none focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 lg:w-32 dark:hover:bg-primary-700 dark:focus:ring-primary-800">Complete</button>
        }
    </div>
</div>

<ToDoModal @ref="DetailModal" Record="Record" OnDelete="EditDelete" OnUpdate="EditUpdate"></ToDoModal>

@code {
    ToDoModal DetailModal;

    [Parameter]
    public required ToDoRecord Record { get; set; }

    [Parameter]
    public EventCallback<ToDoRecord> OnUpdate { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    // Complete this to do
    public async Task OnCompleteBtnClicked()
    {
        Record.State = ToDoState.Finished;
        Record.FinishedAt = DateTime.Now;
        await OnUpdate.InvokeAsync(Record);
    }

    // Undo the complete action
    private async Task OnUncompleteBtnClicked()
    {
        Record.State = ToDoState.Created;
        await OnUpdate.InvokeAsync(Record);
    }

    // Show detail modal
    private async Task OnShowDetailsClicked()
    {
        await DetailModal.ShowDetailsForm();
    }

    // Detail modal return delete
    private async Task EditDelete()
    {
        await DetailModal.ModalRef.Hide();
        await OnDelete.InvokeAsync(Record.Id);
    }

    // Detail modal return update
    private async Task EditUpdate()
    {
        await DetailModal.ModalRef.Hide();
        await OnUpdate.InvokeAsync(Record);
    }
}
