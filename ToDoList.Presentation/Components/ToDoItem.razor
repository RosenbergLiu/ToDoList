@rendermode InteractiveServer
@inject DialogService DialogService

<div class="flex flex-wrap items-center gap-y-4 py-6">
    <dl class="w-1/2 sm:w-1/4 lg:w-auto lg:flex-1">
        <dt class="text-base font-medium text-gray-500 dark:text-gray-400">Title:</dt>
        <dd class="mt-1.5 text-base font-semibold text-gray-900 dark:text-white">
            <div class="@(Record.State == ToDoState.Finished ? "text-gray-500 line-through" : "")">@Record.Title</div>
        </dd>
    </dl>

    <dl class="w-1/2 sm:w-1/4 lg:w-auto lg:flex-1">
        <dt class="text-base font-medium text-gray-500 dark:text-gray-400">Due By:</dt>
        <dd class="mt-1.5 text-base font-semibold text-gray-900 dark:text-white">
            <div class="@(Record.State == ToDoState.Finished ? "text-gray-500 line-through" : "")">
                @(Record.DueDate.ToString("dd.MM.yyyy hhtt", System.Globalization.CultureInfo.InvariantCulture))
            </div>
        </dd>
    </dl>

    @if (Record.State == ToDoState.Finished)
    {
        <dl class="w-1/2 sm:w-1/4 lg:w-auto lg:flex-1">
            <dt class="text-base font-medium text-gray-500 dark:text-gray-400">Finished At:</dt>
            <dd class="mt-1.5 text-base font-semibold text-gray-900 dark:text-white">@(Record.FinishedAt.ToString("dd.MM.yyyy"))</dd>
        </dl>
    }
    else
    {
        <dl class="w-1/2 sm:w-1/4 lg:w-auto lg:flex-1">
            <dt class="text-base font-medium text-gray-500 dark:text-gray-400">Created On:</dt>
            <dd class="mt-1.5 text-base font-semibold text-gray-900 dark:text-white">@(Record.CreatedOn.ToString("dd.MM.yyyy"))</dd>
        </dl>
    }

    <dl class="w-1/2 sm:w-1/4 lg:w-auto lg:flex-1">
        <dt class="text-base font-medium text-gray-500 dark:text-gray-400">Status:</dt>
        @switch (Record.State)
        {
            case ToDoState.Finished:
                <dd class="me-2 mt-1.5 inline-flex items-center rounded bg-green-100 px-2.5 py-0.5 text-xs font-medium text-green-800 dark:bg-green-900 dark:text-green-300">
                    <svg class="me-1 h-3 w-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 11.917 9.724 16.5 19 7.5" />
                    </svg>
                    Completed
                </dd>
                break;

            case ToDoState.Created:
                <dd class="bg-primary-100 text-primary-800 me-2 mt-1.5 inline-flex items-center rounded px-2.5 py-0.5 text-xs font-medium dark:bg-primary-900 dark:text-primary-300">
                    <svg class="me-1 h-3 w-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.5 4h-13m13 16h-13M8 20v-3.333a2 2 0 0 1 .4-1.2L10 12.6a1 1 0 0 0 0-1.2L8.4 8.533a2 2 0 0 1-.4-1.2V4h8v3.333a2 2 0 0 1-.4 1.2L13.957 11.4a1 1 0 0 0 0 1.2l1.643 2.867a2 2 0 0 1 .4 1.2V20H8Z" />
                    </svg>
                    Created
                </dd>
                break;

            case ToDoState.Overdue:
                <dd class="me-2 mt-1.5 inline-flex items-center rounded bg-red-100 px-2.5 py-0.5 text-xs font-medium text-red-800 dark:bg-red-900 dark:text-red-300">
                    <svg class="me-1 h-3 w-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18 17.94 6M18 18 6.06 6" />
                    </svg>
                    Cancelled
                </dd>
                break;
        }
    </dl>

    <div class="grid w-full gap-4 sm:grid-cols-2 lg:flex lg:w-64 lg:items-center lg:justify-end">

        <button @onclick="OnShowDetailsClicked" class="inline-flex w-full justify-center rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-900 hover:bg-gray-100 hover:text-primary-700 focus:z-10 focus:outline-none focus:ring-4 focus:ring-gray-100 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-400 lg:w-auto dark:hover:bg-gray-700 dark:hover:text-white dark:focus:ring-gray-700">View details</button>
        
        @if(Record.State == ToDoState.Finished)
        {
            <button @onclick="OnUncompleteBtnClicked" class="rounded-lg bg-yellow-400 px-3 py-2 text-sm font-medium text-white hover:bg-yellow-500 focus:outline-none focus:ring-4 focus:ring-yellow-300 lg:w-32 dark:focus:ring-yellow-900">Uncomplete</button>
        }
        else
        {
            <button @onclick="OnCompleteBtnClicked" class="bg-primary-700 rounded-lg px-3 py-2 text-sm font-medium text-white hover:bg-primary-800 focus:outline-none focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 lg:w-32 dark:hover:bg-primary-700 dark:focus:ring-primary-800">Complete</button>
        }
    </div>
</div>

<Modal @ref="ModalRef" class="fixed left-0 right-0 top-0 z-50 hidden h-modal w-full items-center justify-center overflow-y-auto overflow-x-hidden md:inset-0 md:h-full">
    <div class="relative h-full w-full max-w-2xl p-4 md:h-auto">
        <!-- Modal content -->
        <div class="relative rounded-lg bg-white p-4 shadow dark:bg-gray-800 sm:p-5">
            <!-- Modal header -->
            <div class="mb-4 flex items-center justify-between rounded-t border-b pb-4 dark:border-gray-600 sm:mb-5">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                    Update To-do
                </h3>
                <CloseButton class="ml-auto inline-flex items-center rounded-lg bg-transparent p-1.5 text-sm text-gray-400 hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-600 dark:hover:text-white">
                    <span class="sr-only">Close modal</span>
                </CloseButton>
            </div>
            <!-- Modal body -->
            <form @onsubmit="OnRecordDetailChanged">
                <div class="mb-4 grid gap-4 sm:grid-cols-2">
                    <div>
                        <label for="name" class="mb-2 block text-sm font-medium text-gray-900 dark:text-white">Title</label>
                        <input type="text" @bind-value="FormModel.Title" name="name" id="name" class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                    </div>
                    <div>
                        <label for="brand" class="mb-2 block text-sm font-medium text-gray-900 dark:text-white">Due date</label>
                        <div class="relative max-w-sm">
                            <div class="pointer-events-none absolute inset-y-0 start-0 flex items-center ps-3">
                                <svg class="h-4 w-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z" />
                                </svg>
                            </div>
                            <DatePicker TValue="DateTime" @bind-Date="@Record.DueDate" InputMode="DateInputMode.Date" class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 ps-10 text-sm text-gray-900 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"></DatePicker>
                        </div>
                    </div>
                    <div class="sm:col-span-2">
                        <label for="description" class="mb-2 block text-sm font-medium text-gray-900 dark:text-white">Description</label>
                        <textarea @bind="FormModel.Description" rows="5" class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"></textarea>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <button type="submit" class="bg-primary-700 rounded-lg px-5 py-2.5 text-center text-sm font-medium text-white hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                        Update To-do
                    </button>
                    <button @onclick="OnDeleteToDoClicked" type="button" class="inline-flex items-center rounded-lg border border-red-600 px-5 py-2.5 text-center text-sm font-medium text-red-600 hover:text-white hover:bg-red-600 focus:ring-4 focus:outline-none focus:ring-red-300 dark:border-red-500 dark:text-red-500 dark:hover:text-white dark:hover:bg-red-600 dark:focus:ring-red-900">
                        <svg class="-ml-1 mr-1 h-5 w-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>
                        Delete
                    </button>
                </div>
            </form>
        </div>
    </div>
</Modal>

@code {
    private Modal ModalRef;

    [Parameter]
    public required ToDoRecord Record { get; set; }

    [SupplyParameterFromForm]
    private ToDoDetailsFormModel FormModel { get; set; } = new ToDoDetailsFormModel();

    [Parameter]
    public EventCallback<ToDoRecord> OnUpdate { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    public async Task OnCompleteBtnClicked()
    {
        Record.State = ToDoState.Finished;
        Record.FinishedAt = DateTime.Now;
        await OnUpdate.InvokeAsync(Record);
    }

    public async Task OnRecordDetailChanged()
    {
        Record.DueDate = FormModel.DueDate!.Value;

        await OnUpdate.InvokeAsync(Record);
    }

    private async Task OnUncompleteBtnClicked()
    {
        Record.State = ToDoState.Created;
        await OnUpdate.InvokeAsync(Record);
    }

    private void OnShowDetailsClicked()
    {
        FormModel = new ToDoDetailsFormModel
            {
                Title = Record.Title,
                Description = Record.Description,
                DueDate = Record.DueDate
            };
        ModalRef.Show();
    }

    private async Task OnDeleteToDoClicked()
    {
        await ModalRef.Hide();
        await OnDelete.InvokeAsync(Record.Id);
    }
}
